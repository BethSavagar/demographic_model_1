*** R 4.0.3 MODULE LOADED ***
Failed to query server: Access denied
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.3     ✔ purrr   0.3.4
✔ tibble  3.1.0     ✔ dplyr   1.0.8
✔ tidyr   1.2.0     ✔ stringr 1.4.0
✔ readr   2.1.2     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
here() starts at /storage/users/bsavagar

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
Warning message:
In system("timedatectl", intern = TRUE) :
  running command 'timedatectl' had status 1
[[1]]
[[1]]$value
function (w, f_list, m_list, output, summary_df, Kid, Sub, Adu_F) 
{
    fIm <- f_list[["fIm"]]
    fS <- f_list[["fS"]]
    fE <- f_list[["fE"]]
    fI <- f_list[["fI"]]
    fR <- f_list[["fR"]]
    mIm <- m_list[["mIm"]]
    mS <- m_list[["mS"]]
    mE <- m_list[["mE"]]
    mI <- m_list[["mI"]]
    mR <- m_list[["mR"]]
    if (output %in% c("summary", "summary_all")) {
        fpop <- fIm + fS + fE + fI + fR
        mpop <- mIm + mS + mE + mI + mR
        pop_tot <- fpop + mpop
        sum_pop <- sum(fpop) + sum(mpop)
        fimmune <- fIm + fR
        mimmune <- mIm + mR
        sum_immune <- sum(fimmune) + sum(mimmune)
        prop_immune <- sum_immune/sum_pop
        sumR <- sum(fR) + sum(mR)
        pR_noIm <- sumR/sum_pop
        sum_inf <- sum(fI) + sum(mI)
        prop_inf <- sum_inf/sum_pop
        Kid_tot <- pop_tot[Kid]
        sum_Kid <- sum(Kid_tot)
        pKid <- sum_Kid/sum_pop
        Sub_tot <- pop_tot[Sub]
        sum_Sub <- sum(Sub_tot)
        pSub <- sum_Sub/sum_pop
        Adu_tot <- pop_tot[Adu_F]
        sum_Adu <- sum(Adu_tot)
        pAdu <- sum_Adu/sum_pop
        fKid_tot <- fpop[Kid]
        sum_fKid <- sum(fKid_tot)
        pfKid <- sum_fKid/sum_pop
        mKid_tot <- mpop[Kid]
        sum_mKid <- sum(mKid_tot)
        pmKid <- sum_mKid/sum_pop
        fSub_tot <- fpop[Sub]
        sum_fSub <- sum(fSub_tot)
        pfSub <- sum_fSub/sum_pop
        mSub_tot <- mpop[Sub]
        sum_mSub <- sum(mSub_tot)
        pmSub <- sum_mSub/sum_pop
        fAdu_tot <- fpop[Adu_F]
        sum_fAdu <- sum(fAdu_tot)
        pfAdu <- sum_fAdu/sum_pop
        mAdu_tot <- mpop[Adu_F]
        sum_mAdu <- sum(mAdu_tot)
        pmAdu <- sum_mAdu/sum_pop
        pF <- sum(fpop)/sum(pop_tot)
    }
    if (output == "summary") {
        summary_df[w, ] <- c(w, sum_pop, prop_immune, pR_noIm, 
            prop_inf, pF, pKid, pSub, pAdu)
    }
    else if (output == "summary_all") {
        summary_df[w, ] <- c(w, sum_pop, prop_immune, pR_noIm, 
            prop_inf, pF, pfKid, pfSub, pfAdu, pmKid, pmSub, 
            pmAdu)
    }
    else if (output == "counts") {
        count_df <- c()
    }
    if (output == "summary") {
        return(summary_df)
    }
    else if (output == "summary_all") {
        return(summary_df)
    }
    else if (output == "counts") {
        return(count_df)
    }
}

[[1]]$visible
[1] FALSE


[[2]]
[[2]]$value
function (f_list, m_list, TimeStop_dynamics, TimeStop_transmission, 
    output, demographic_pars, summary_df, Imm_b) 
{
    fIm <- f_list[["fIm"]]
    fS <- f_list[["fS"]]
    fE <- f_list[["fE"]]
    fI <- f_list[["fI"]]
    fR <- f_list[["fR"]]
    mIm <- m_list[["mIm"]]
    mS <- m_list[["mS"]]
    mE <- m_list[["mE"]]
    mI <- m_list[["mI"]]
    mR <- m_list[["mR"]]
    immunity <- demographic_pars %>% pull(imm)
    net_off_F <- demographic_pars %>% pull(net_off_F)
    net_off_M <- demographic_pars %>% pull(net_off_M)
    mort_F <- demographic_pars %>% pull(mort_F)
    mort_M <- demographic_pars %>% pull(mort_M)
    ppr_mort <- demographic_pars %>% pull(ppr_mort)
    birth <- demographic_pars %>% pull(birth)
    for (w in 2:TimeStop_dynamics) {
        if (w == 2) {
            fIm_prev <- fIm
            mIm_prev <- mIm
            fS_prev <- fS
            mS_prev <- mS
            fE_prev <- fE
            mE_prev <- mE
            fI_prev <- fI
            mI_prev <- mI
            fR_prev <- fR
            mR_prev <- mR
        }
        Im_births <- sum(birth * Imm_b * fR_prev)
        S_births <- sum(birth * (1 - Imm_b) * fR_prev) + sum(birth * 
            fS_prev)
        E_births <- 0
        I_births <- 0
        R_births <- 0
        fIm_new <- fIm_prev * (immunity) * (1 - net_off_F) * 
            (1 - mort_F)
        mIm_new <- mIm_prev * (immunity) * (1 - net_off_M) * 
            (1 - mort_M)
        fIm_cur <- c(0.5 * Im_births, fIm_new[-length(fIm_new)])
        mIm_cur <- c(0.5 * Im_births, mIm_new[-length(mIm_new)])
        fS_new <- fS_prev * (1 - net_off_F) * (1 - mort_F) + 
            fIm_prev * (1 - immunity)
        mS_new <- mS_prev * (1 - net_off_M) * (1 - mort_M) + 
            mIm_prev * (1 - immunity)
        fS_cur <- c(0.5 * S_births, fS_new[-length(fS_new)])
        mS_cur <- c(0.5 * S_births, mS_new[-length(mS_new)])
        fE_new <- fE_prev * (1 - net_off_F) * (1 - mort_F)
        mE_new <- mE_prev * (1 - net_off_M) * (1 - mort_M)
        fE_cur <- c(0.5 * E_births, fE_new[-length(fE_new)])
        mE_cur <- c(0.5 * E_births, mE_new[-length(mE_new)])
        fI_new <- fI_prev * (1 - net_off_F) * (1 - mort_F)
        mI_new <- mI_prev * (1 - net_off_M) * (1 - mort_M)
        fI_cur <- c(0.5 * I_births, fI_new[-length(fI_new)])
        mI_cur <- c(0.5 * I_births, mI_new[-length(mI_new)])
        fR_new <- fR_prev * (1 - net_off_F) * (1 - mort_F)
        mR_new <- mR_prev * (1 - net_off_M) * (1 - mort_M)
        fR_cur <- c(0.5 * R_births, fR_new[-length(fR_new)])
        mR_cur <- c(0.5 * R_births, mR_new[-length(mR_new)])
        f_list <- list(fIm = fIm_cur, fS = fS_cur, fE = fE_cur, 
            fI = fI_cur, fR = fR_cur)
        m_list <- list(mIm = mIm_cur, mS = mS_cur, mE = mE_cur, 
            mI = mI_cur, mR = mR_cur)
        summary_df <- summary_demos(w, f_list, m_list, output, 
            summary_df)
        if (summary_df[w, "sum_pop"] < min_pop) {
            f_list <- list(fIm = 0, fS = 0, fE = 0, fI = 0, fR = 0)
            m_list <- list(mIm = 0, mS = 0, mE = 0, mI = 0, mR = 0)
            summary_df <- summary_demos(w, f_list, m_list, output, 
                summary_df)
        }
        fIm_prev <- fIm_cur
        mIm_prev <- mIm_cur
        fS_prev <- fS_cur
        mS_prev <- mS_cur
        fE_prev <- fE_cur
        mE_prev <- mE_cur
        fI_prev <- fI_cur
        mI_prev <- mI_cur
        fR_prev <- fR_cur
        mR_prev <- mR_cur
    }
    summary_df <- summary_df %>% replace(is.na(.), 0)
    return(summary_df)
}

[[2]]$visible
[1] FALSE


[[3]]
[[3]]$value
function (TimeStop_dynamics, output) 
{
    if (output == "summary") {
        sum_stats <- c("w", "sum_pop", "prop_immune", "pR_noIm", 
            "prop_inf", "pF", "pKid", "pSub", "pAdu")
        summary_df <- as.data.frame(matrix(0, nrow = TimeStop_dynamics, 
            ncol = length(sum_stats)))
        colnames(summary_df) <- sum_stats
    }
    else if (output == "summary_all") {
        sum_stats <- c("w", "sum_pop", "prop_immune", "pR_noIm", 
            "prop_inf", "pF", "pfKid", "pfSub", "pfAdu", "pmKid", 
            "pmSub", "pmAdu")
        summary_df <- as.data.frame(matrix(0, nrow = TimeStop_dynamics, 
            ncol = length(sum_stats)))
        colnames(summary_df) <- sum_stats
    }
    else if (output == "counts") {
    }
    return(summary_df)
}

[[3]]$visible
[1] FALSE


[[4]]
[[4]]$value
function (imm_decay_corrected, var_input_full, fix_age_data_full, 
    f_list, m_list, TimeStop_dynamics, TimeStop_transmission, 
    output, summary_df, clean_environment) 
{
    var_input_set <- var_input_full
    fix_age_data <- fix_age_data_full %>% select(parameter, value = all_of(fixdata))
    N_tot <- fix_age_data %>% filter(parameter == "N_tot") %>% 
        pull(value)
    kid_f_prop <- fix_age_data %>% filter(parameter == "kid_f_prop") %>% 
        pull(value)
    sub_f_prop <- fix_age_data %>% filter(parameter == "sub_f_prop") %>% 
        pull(value)
    adu_f_prop <- fix_age_data %>% filter(parameter == "adu_f_prop") %>% 
        pull(value)
    kid_m_prop <- fix_age_data %>% filter(parameter == "kid_m_prop") %>% 
        pull(value)
    sub_m_prop <- fix_age_data %>% filter(parameter == "sub_m_prop") %>% 
        pull(value)
    adu_m_prop <- fix_age_data %>% filter(parameter == "adu_m_prop") %>% 
        pull(value)
    age_p_f <- c(kid_f_p = kid_f_prop, sub_f_p = sub_f_prop, 
        adu_f_p = adu_f_prop)
    age_p_m <- c(kid_m_p = kid_m_prop, sub_m_p = sub_m_prop, 
        adu_m_p = adu_m_prop)
    pR <- fix_age_data %>% filter(parameter == "pR") %>% pull(value)
    wk2mnth <- 4.345
    kid_max <- fix_age_data %>% filter(parameter == "kid_max") %>% 
        pull(value)
    kid_max_wks <- round(kid_max * wk2mnth)
    sub_max <- fix_age_data %>% filter(parameter == "sub_max") %>% 
        pull(value)
    sub_max_wks <- round(sub_max * wk2mnth)
    if (SA == T) {
        max_age_F <- var_input_set["adu_f_max_yrs"] * 52
        max_age_M <- var_input_set["adu_m_max_yrs"] * 52
    }
    Kid <- 1:kid_max_wks
    Sub <- (kid_max_wks + 1):sub_max_wks
    Adu_F <- (sub_max_wks + 1):max_age_F
    Adu_M <- (sub_max_wks + 1):max_age_M
    Imm_b <- imm_decay_corrected %>% filter(wk == 0) %>% pull(imm_corrected)
    off_1 <- 0
    ppr_mort_1 <- 0
    ppr_mort_2 <- 0
    if (SA == T) {
        off_F <- var_input_set["NET_offtake_f"]
        off_M <- var_input_set["NET_offtake_m"]
        mort_1 <- var_input_set["mortality_y"]
        mort_2 <- var_input_set["mortality_a"]
        birth_r <- var_input_set["birth_rate"]
        min_age_offtake <- var_input_set["min_age_offtake"]
        min_age_repro <- var_input_set["min_age_repro"]
    }
    off_1 <- 1 - ((1 - off_1)^(1/52))
    off_F <- 1 - ((1 - off_F)^(1/52))
    off_M <- 1 - ((1 - off_M)^(1/52))
    mort_1 <- 1 - ((1 - mort_1)^(1/52))
    mort_2 <- 1 - ((1 - mort_2)^(1/52))
    birth_r <- birth_r/52
    min_offtake_wks <- round(min_age_offtake * wk2mnth)
    min_repro_wks <- round(min_age_repro * wk2mnth)
    demographic_pars <- data.frame(age_weeks = 1:max_age_F) %>% 
        mutate(age_cat = ifelse(age_weeks <= kid_max_wks, "Kid", 
            ifelse(age_weeks <= sub_max_wks, "Sub", "Adu"))) %>% 
        left_join(imm_decay_corrected %>% select(wk, imm = imm_corrected), 
            c(age_weeks = "wk")) %>% mutate(imm = ifelse(is.na(imm), 
        0, imm)) %>% mutate(net_off_F = ifelse(age_weeks < min_offtake_wks, 
        off_1, off_F), net_off_M = ifelse(age_weeks < min_offtake_wks, 
        off_1, off_M), mort_F = ifelse(age_weeks <= kid_max_wks, 
        mort_1, ifelse(age_weeks == max_age_F, 1, mort_2)), mort_M = ifelse(age_weeks <= 
        kid_max_wks, mort_1, ifelse(age_weeks == max_age_M, 1, 
        mort_2)), ppr_mort = ifelse(age_weeks <= kid_max_wks, 
        ppr_mort_1, ppr_mort_2), birth = ifelse(age_weeks < min_repro_wks, 
        0, birth_r), age_p_F = ifelse(age_cat == "Kid", kid_f_prop, 
        ifelse(age_cat == "Sub", sub_f_prop, adu_f_prop)), age_p_M = ifelse(age_cat == 
        "Kid", kid_m_prop, ifelse(age_cat == "Sub", sub_m_prop, 
        ifelse(age_cat == "Adu" & age_weeks <= max_age_M, adu_m_prop, 
            0))), n_weeks_F = ifelse(age_cat == "Kid", kid_max_wks, 
        ifelse(age_cat == "Sub", sub_max_wks - kid_max_wks, ifelse(age_cat == 
            "Adu" & age_weeks <= max_age_F, max_age_F - sub_max_wks, 
            0))), n_weeks_M = ifelse(age_cat == "Kid", kid_max_wks, 
        ifelse(age_cat == "Sub", sub_max_wks - kid_max_wks, ifelse(age_cat == 
            "Adu" & age_weeks <= max_age_M, max_age_M - sub_max_wks, 
            0)))) %>% mutate(pop_init_F = (age_p_F * N_tot)/n_weeks_F, 
        pop_init_M = (age_p_M * N_tot)/n_weeks_M, pop_init_M = ifelse(is.na(pop_init_M), 
            0, pop_init_M)) %>% select(age_weeks, age_cat, imm, 
        birth, mort_F, mort_M, ppr_mort, net_off_F, net_off_M, 
        pop_init_F, pop_init_M)
    fIm_init <- rep(0, max_age_F)
    mIm_init <- rep(0, max_age_F)
    fS_init <- demographic_pars %>% pull(pop_init_F) * (1 - pR)
    mS_init <- demographic_pars %>% pull(pop_init_M) * (1 - pR)
    fE_init <- rep(0, max_age_F)
    mE_init <- rep(0, max_age_F)
    fI_init <- rep(0, max_age_F)
    mI_init <- rep(0, max_age_F)
    fR_init <- demographic_pars %>% pull(pop_init_F) * pR
    mR_init <- demographic_pars %>% pull(pop_init_M) * pR
    f_list <- list(fIm = fIm_init, fS = fS_init, fE = fE_init, 
        fI = fI_init, fR = fR_init)
    m_list <- list(mIm = mIm_init, mS = mS_init, mE = mE_init, 
        mI = mI_init, mR = mR_init)
    if (clean_environment == T) {
        rm(fix_age_data, kid_f_prop, sub_f_prop, adu_f_prop, 
            kid_m_prop, sub_m_prop, adu_m_prop, kid_max, sub_max, 
            max_age_F, max_age_M, fIm_init, fS_init, fE_init, 
            fI_init, fR_init, mIm_init, mS_init, mE_init, mI_init, 
            mR_init, off_1, off_F, off_M, mort_1, mort_2, birth_r, 
            ppr_mort_1, ppr_mort_2)
    }
    if (transmission == T) {
        source(here("scripts", "parameters", "set-pars-transmission-fixed.R"))
    }
    summary_df <- summary_demos(w = 1, f_list, m_list, output, 
        summary_df, Kid, Sub, Adu_F)
    output_df <- dynmod_func(f_list, m_list, TimeStop_dynamics, 
        TimeStop_transmission, output, demographic_pars, summary_df, 
        Imm_b)
    pR_noIm_temp <- output_df %>% pull(pR_noIm)
    agesex_dynamics <- output_df
    if (output %in% c("summary", "summary_all")) {
        res <- output_df %>% filter(w == TimeStop_dynamics) %>% 
            mutate(pop_growth = output_df[nrow(output_df), "sum_pop"]/output_df[1, 
                "sum_pop"], tenyr_growth = (output_df[t1, "sum_pop"])/output_df[t2, 
                "sum_pop"])
    }
    return(res)
}

[[4]]$visible
[1] FALSE


Rows: 12 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): parameter
dbl (2): sim.1, sim.2

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 13 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): parameter
dbl (5): sim.1, min.1, max.1, min.3, max.3

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Rows: 22 Columns: 3
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (3): wk, imm, imm_corrected

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(pars_min)` instead of `pars_min` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
Note: Using an external vector in selections is ambiguous.
ℹ Use `all_of(pars_max)` instead of `pars_max` to silence this message.
ℹ See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
